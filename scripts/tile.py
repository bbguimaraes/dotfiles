#!/bin/python3
"""
Auxiliary script to work with tile sheets.

Commands:

- `tile filename size`: reads an image from `filename` composed of tiles of a
  given `size` (e.g. `16x16`) and generates a tile sheet containing only the
  unique tiles in the image.  The resulting image is written to `stdout`.

- `reverse sheet_filename img_filename size`: reads an image from `img_filename`
  and a tile sheet from `sheet_filename` (which might have been generated by the
  `tile` command) and writes to `stdout` the list of tile indices that generates
  the image from the tile sheet.

- `verify filename size`: constructs an image with the results of both `tile`
  and `reverse` and compares the result to the original image.  Outputs an image
  `diff` to `stdout`.
"""
import functools
import itertools
import os
import subprocess
import sys
import tempfile

IMG_OPTS = ('-define', 'png:format=png32', '-background', 'Transparent')

def main(*args):
    cmd = ''
    if len(args) > 0:
        cmd, args = args[0], args[1:]
    if cmd == "tile":
        if len(args) < 2:
            return usage('tile filename size')
        return cmd_tile(*args)
    if cmd == "reverse":
        if len(args) < 2:
            return usage('reverse sheet_filename img_filename size')
        return cmd_reverse(*args)
    if cmd == 'verify':
        if len(args) < 2:
            return usage('verify filename size')
        return cmd_verify(*args)
    print(f'invalid command: {cmd}', file=sys.stderr)
    return 1

def usage(msg):
    print('Usage:', sys.argv[0], msg, file=sys.stderr)
    return 1

def cmd_tile(filename, size):
    with tempfile.TemporaryDirectory() as outdir:
        outdir = os.path.join(outdir, 'tile')
        create_tiles(filename, outdir, size)
        deduplicate_tiles(outdir)
        create_montage(outdir, size, sys.stdout)

def create_tiles(filename, outdir, size):
    subprocess.check_call((
        'convert', *IMG_OPTS, filename,
        '+gravity', '-crop', size, os.path.join(outdir, '%d')))

def deduplicate_tiles(outdir):
    s = set()
    for filename, sig in img_hashes(list_dir_sorted(outdir)):
        if sig in s:
            os.unlink(os.path.join(outdir, filename))
        else:
            s.add(sig)

def list_dir_sorted(d):
    return map(
        functools.partial(os.path.join, d),
        sorted(os.listdir(d), key=int))

def img_hashes(imgs):
    cmd = ('identify', '-format', '%f %#\n', *imgs)
    return map(
        str.split,
        subprocess.check_output(cmd).decode('utf-8').splitlines())

def create_montage(outdir, size, out):
    subprocess.check_call((
        'montage', *IMG_OPTS, '-geometry', size,
        *list_dir_sorted(outdir), '-'), stdout=out)

def cmd_reverse(sheet, img, size):
    with tempfile.TemporaryDirectory() as outdir:
        out = match_tiles(
            tile_rev(outdir, size, sheet, 'sheet'),
            tile_rev(outdir, size, img, 'img'))
        for x in out:
            print(x)

def tile_rev(outdir, size, filename, name):
    tiles_dir = os.path.join(outdir, name)
    os.mkdir(tiles_dir)
    create_tiles(filename, tiles_dir, size)
    return img_hashes(list_dir_sorted(tiles_dir))

def match_tiles(sheet_hashes, img_hashes):
    lut = dict(map(reversed, sheet_hashes))
    return (
        int(os.path.basename(lut[i]))
        for i in dict(img_hashes).values())

def cmd_verify(filename, size):
    with tempfile.TemporaryDirectory() as outdir:
        tile_dir = os.path.join(outdir, 'tile')
        os.mkdir(tile_dir)
        create_tiles(filename, tile_dir, size)
        deduplicate_tiles(tile_dir)
        tmp = open(os.path.join(outdir, 'tmp'), 'w')
        create_montage(tile_dir, size, tmp)
        tiles = match_tiles(
            tile_rev(outdir, size, tmp.name, 'sheet'),
            tile_rev(outdir, size, filename, 'img'))
        sheet_dir = os.path.join(outdir, 'sheet')
        p0 = subprocess.Popen((
            'montage', *IMG_OPTS, '-geometry', size,
            *(os.path.join(sheet_dir, str(x)) for x in tiles), '-',
        ), stdout=subprocess.PIPE)
        subprocess.check_call(('compare', filename, '-', '-'), stdin=p0.stdout)

if __name__ == '__main__':
    main(*sys.argv[1:])
